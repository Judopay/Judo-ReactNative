version: 2.1

executors:
  node:
    docker:
      - image: circleci/node
  macos:
    macos:
      xcode: 12.3.0
  android:
    docker:
      - image: circleci/android:api-29

jobs:
  get_dependencies_sdk:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-reactnative-sdk-yarn-{{ checksum "package.json" }}
      - run:
          name: Yarn Install
          command: yarn install
      - save_cache:
          key: judokit-reactnative-sdk-yarn-{{ checksum "package.json" }}
          paths: node_modules
  # pod_install:
  #   executor: macos
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           - judokit-reactnative-cocoapods-{{ checksum "ios/Podfile" }}
  #     - run:
  #         name: Pod Install
  #         working_directory: ios
  #         command: pod install
  #     - save_cache:
  #         key: judokit-reactnative-cocoapods-{{ checksum "ios/Podfile" }}
  #         paths:
  #           - ios/Pods
  #           - ios/Podfile.lock
  get_dependencies_sample_ios:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-reactnative-sample-ios-yarn-{{ checksum "sample-app/package.json" }}
      - restore_cache:
          keys:
            - judokit-reactnative-sample-ios-cocoapods-{{ checksum "sample-app/ios/Podfile" }}
      - run:
          name: Yarn Install
          working_directory: sample-app
          command: yarn install
      - run:
          name: Pod Install
          working_directory: sample-app/ios
          command: pod install
      - save_cache:
          key: judokit-reactnative-sample-ios-yarn-{{ checksum "sample-app/package.json" }}
          paths: sample-app/node_modules
      - save_cache:
          key: judokit-reactnative-sample-ios-cocoapods-{{ checksum "sample-app/ios/Podfile" }}
          paths: 
            - sample-app/ios/Pods
            - sample-app/ios/Podfile.lock
  get_dependencies_sample_android:
    executor: android
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-reactnative-sample-android-yarn-{{ checksum "sample-app/package.json" }}
      - run:
          name: Install Yarn
          command: |
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt update && sudo apt install yarn
      - run:
          name: Yarn Install
          working_directory: sample-app
          command: yarn install
      - save_cache:
          key: judokit-reactnative-sample-android-yarn-{{ checksum "sample-app/package.json" }}
          paths: sample-app/node_modules
  build_sdk_js:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-reactnative-{{ checksum "package.json" }}
      - run:
          name: Yarn Bundle
          command: yarn react-native bundle --entry-file JudoPay.tsx --bundle-output bundle.js
      - persist_to_workspace:
            root: .
            paths:
              - bundle.js
  # build_sdk_ios:
  #   executor: macos
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           - judokit-reactnative-cocoapods-{{ checksum "ios/Podfile" }}
  #     - run:
  #         name: XCode Build
  #         working_directory: ios
  #         command: |
  #           xcodebuild clean build \
  #             -workspace RNJudo.xcworkspace \
  #             -scheme RNJudo \
  #             -configuration Release \
  #             -sdk iphonesimulator \
  #             -derivedDataPath DerivedData
  #     - persist_to_workspace:
  #           root: .
  #           paths:
  #             - ios/DerivedData
  # build_sdk_android:
  #   executor: android
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           - judokit-reactnative-gradle-{{ checksum "android/build.gradle" }}
  #     - run:
  #         name: Gradle Build
  #         working_directory: android
  #         command: ./gradlew clean build
  #     - save_cache:
  #         key: judokit-reactnative-gradle-{{ checksum "android/build.gradle" }}
  #         paths:
  #           - android/build/cache
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - android/build
  build_sample_ios:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-reactnative-sample-ios-yarn-{{ checksum "sample-app/package.json" }}
      - restore_cache:
          keys:
            - judokit-reactnative-sample-ios-cocoapods-{{ checksum "sample-app/ios/Podfile" }}
      - run:
          name: Build iOS Sample
          working_directory: sample-app/ios
          command: |
            xcodebuild clean build \
              -workspace sample-app.xcworkspace \
              -scheme sample-app \
              -configuration Debug \
              -sdk iphonesimulator \
              -derivedDataPath DerivedData
      - persist_to_workspace:
          root: .
          paths:
            - sample-app/ios/DerivedData
  build_sample_android:
    executor: android
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-reactnative-sample-android-yarn-{{ checksum "sample-app/package.json" }}
      - run:
          name: Install Nodejs
          command: |
            curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -
            sudo apt-get install -y nodejs
      - run:
          name: Prepare Google Services Json
          command: echo "$REACTNATIVE_ANDROID_GOOGLE_SERVICES_JSON" | base64 -d > sample-app/android/google-services.json
      - run:
          name: Prepare Signing Key
          working_directory: sample-app/android
          command: |
            echo "$ANDROID_SIGNING_PRIVATE_KEY" | base64 -d > signing.key
            echo "$ANDROID_SIGNING_CERTIFICATE" | base64 -d > signing.crt
            openssl pkcs12 -export -inkey signing.key -in signing.crt -out signing.p12 -passout "pass:$ANDROID_KEYSTORE_PASSWORD"
            keytool -importkeystore -srckeystore signing.p12 -srcstoretype pkcs12 -srcstorepass "$ANDROID_KEYSTORE_PASSWORD" -destkeystore signing.jks -deststoretype JKS -storepass "$ANDROID_KEYSTORE_PASSWORD" -noprompt 2>/dev/null
            echo "storeFile=${PWD}/signing.jks" > keystore.properties
            echo "storePassword=${ANDROID_KEYSTORE_PASSWORD}" >> keystore.properties
            echo "keyAlias=1" >> keystore.properties
            echo "keyPassword=${ANDROID_KEYSTORE_PASSWORD}" >> keystore.properties
      - run:
          name: Build Sample App APK
          working_directory: sample-app/android
          command: |
            ./gradlew assembleRelease
      - persist_to_workspace:
          root: .
          paths:
            - sample-app/android/build
  unit_test_sdk_js:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-reactnative-{{ checksum "package.json" }}
      - run:
          name: Yarn Test
          command: |
            yarn lint || true
            yarn test
      - persist_to_workspace:
            root: .
            paths:
              - coverage
  # unit_test_sdk_ios:
  #   executor: macos
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           - judokit-reactnative-ios-cocoapods-{{ checksum "ios/Podfile" }}
  #     - attach_workspace:
  #         at: ~/project
  #     - run:
  #         name: Install Sonar Build Wrapper
  #         command: |
  #           curl -o /var/tmp/build-wrapper-macosx-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-macosx-x86.zip
  #           unzip /var/tmp/build-wrapper-macosx-x86.zip -d /var/tmp
  #           sudo mkdir -p /opt/build-wrapper-macosx/bin
  #           sudo mv /var/tmp/build-wrapper-macosx-x86/* /opt/build-wrapper-macosx/bin/
  #           rm -rf /var/tmp/build-wrapper-macosx-x86
  #           ln -s /opt/build-wrapper-macosx/bin/build-wrapper-macosx-x86 /usr/local/bin/build-wrapper-macosx-x86
  #     - run:
  #         name: Run Unit Tests
  #         working_directory: ios
  #         command: |
  #           build-wrapper-macosx-x86 --out-dir build-wrapper-output xcodebuild \
  #             -workspace RNJudo.xcworkspace \
  #             -scheme RNJudo \
  #             -destination 'platform=iOS Simulator,name=iPhone 11' \
  #             -derivedDataPath DerivedData \
  #             test
  #     - run:
  #         name: Covert XCode Coverage Reports to SonarQube Format
  #         working_directory: ios
  #         command: |
  #           curl -o xccov-to-sonarqube-generic.sh https://raw.githubusercontent.com/SonarSource/sonar-scanning-examples/master/swift-coverage/swift-coverage-example/xccov-to-sonarqube-generic.sh
  #           chmod +x xccov-to-sonarqube-generic.sh
  #           ./xccov-to-sonarqube-generic.sh DerivedData/Logs/Test/*.xcresult/ > build-wrapper-output/sonarqube-generic-coverage.xml
  #           rm xccov-to-sonarqube-generic.sh
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - ios/DerivedData
  #           - ios/build-wrapper-output
  # unit_test_sdk_android:
  #   executor: macos
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/project
  #     - run:
  #         name: Install Android SDK
  #         command: |
  #           brew uninstall adoptopenjdk11
  #           brew install adoptopenjdk/openjdk/adoptopenjdk8
  #           brew install android-sdk
  #           yes | sudo sdkmanager --licenses || true
  #     - run:
  #         name: Run Unit Tests
  #         working_directory: android
  #         command: |
  #           export ANDROID_SDK_ROOT=/usr/local/share/android-sdk
  #           ./gradlew test generateCodeAnalysisReport
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - android/build
  unit_test_sample_ios:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-reactnative-sample-ios-cocoapods-{{ checksum "sample-app/ios/Podfile" }}
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Sonar Build Wrapper
          command: |
            curl -o /var/tmp/build-wrapper-macosx-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-macosx-x86.zip
            unzip /var/tmp/build-wrapper-macosx-x86.zip -d /var/tmp
            sudo mkdir -p /opt/build-wrapper-macosx/bin
            sudo mv /var/tmp/build-wrapper-macosx-x86/* /opt/build-wrapper-macosx/bin/
            rm -rf /var/tmp/build-wrapper-macosx-x86
            ln -s /opt/build-wrapper-macosx/bin/build-wrapper-macosx-x86 /usr/local/bin/build-wrapper-macosx-x86
      - run:
          name: Run Unit Tests
          working_directory: sample-app/ios
          command: |
            build-wrapper-macosx-x86 --out-dir build-wrapper-output xcodebuild \
              -workspace sample-app.xcworkspace \
              -scheme sample-app \
              -destination 'platform=iOS Simulator,name=iPhone 11' \
              -derivedDataPath DerivedData \
              test
      - run:
          name: Covert XCode Coverage Reports to SonarQube Format
          working_directory: sample-app/ios
          command: |
            curl -o xccov-to-sonarqube-generic.sh https://raw.githubusercontent.com/SonarSource/sonar-scanning-examples/master/swift-coverage/swift-coverage-example/xccov-to-sonarqube-generic.sh
            chmod +x xccov-to-sonarqube-generic.sh
            ./xccov-to-sonarqube-generic.sh DerivedData/Logs/Test/*.xcresult/ > build-wrapper-output/sonarqube-generic-coverage.xml
            rm xccov-to-sonarqube-generic.sh
      - persist_to_workspace:
          root: .
          paths:
            - sample-app/ios/DerivedData
            - sample-app/ios/build-wrapper-output
  unit_test_sample_android:
    executor: android
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-reactnative-sample-android-yarn-{{ checksum "sample-app/package.json" }}
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Unit Tests
          working_directory: sample-app/android
          command: ./gradlew test
  release_sample_ios:
    executor: macos
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Firebase CLI
          command: curl -sL https://firebase.tools | bash
      - run:
          name: Store Google Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Create Release Notes
          command: echo "$(git log -1 --pretty=format:"%b")" > ./notes.txt
      - run:
          name: Distribute Sample App
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            firebase appdistribution:distribute \
              somepackage \
              --app "$REACTNATIVE_IOS_FIREBASE_APP_ID" \
              --groups "default-testers" \
              --release-notes-file ./notes.txt
  release_sample_android:
    executor: android
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Firebase CLI
          command: curl -sL https://firebase.tools | bash
      - run:
          name: Store Google Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Create Release Notes
          command: echo "$(git log -1 --pretty=format:"%b")" > ./notes.txt
      - run:
          name: Distribute Sample App
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            firebase appdistribution:distribute \
              sample-app/android/build/outputs/apk/release/somepackage.apk \
              --app "$REACTNATIVE_ANDROID_FIREBASE_APP_ID" \
              --groups "default-testers" \
              --release-notes-file ./notes.txt
  sonar_scan:
    docker:
      - image: gcr.io/opnf-management/sonar-scanner:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run: /opt/run-scan.sh
  release_sdk:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Release SDK
          command: yarn publish
  report_to_jira:
    docker:
      - image: gcr.io/opnf-management/deployer:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - run:
          name: Report Deployment to Jira
          environment:
            ENVIRONMENT: << parameters.environment >>
          command: /resources/scripts/report-status-to-jira.sh

workflows:
  version: 2
  build:
    jobs:
      - get_dependencies_sdk:
          filters:
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/
      - get_dependencies_sample_ios
      - get_dependencies_sample_android
      - build_sdk_js:
          requires:
            - get_dependencies_sdk
          filters:
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/
      - build_sample_ios:
          requires:
            - get_dependencies_sample_ios
      - build_sample_android:
          context: shared-secrets
          requires:
            - get_dependencies_sample_android
      - unit_test_sdk_js:
          requires:
            - build_sdk_js
      # - unit_test_sdk_ios:
      #     requires:
      #       - build_sample_ios
      # - unit_test_sdk_android:
      #     requires:
      #       - build_sample_android
      - unit_test_sample_ios:
          requires:
            - build_sample_ios
      - unit_test_sample_android:
          requires:
            - build_sample_android
      - sonar_scan:
          context: shared-secrets
          requires:
            - unit_test_sdk_js
          #  - unit_test_sdk_ios
          #  - unit_test_sdk_android
      - release_sample_ios:
          context: shared-secrets
          # requires:
          #  - unit_test_sample_ios
          filters:
            branches:
              only:
                - master
      - release_sample_android:
          context: shared-secrets
          # requires:
          #   - unit_test_sample_android
          filters:
            branches:
              only:
                - master
      - report_to_jira:
          context: shared-secrets
          environment: staging
          requires:
            - release_sample_ios
            - release_sample_android
      - release_sdk:
          context: shared-secrets
          requires:
            - build_sdk_js
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/
      - report_to_jira:
          context: shared-secrets
          environment: prod
          requires:
            - release_sdk
          filters:
            tags:
                only:
                  - /^v[0-9]+(\.[0-9]+)*$/
